"""Character personality system for SofÃ­a."""
import yaml
import logging
from typing import Optional
from src.config import CHARACTER_PROFILE_PATH

logger = logging.getLogger(__name__)


class PersonalitySystem:
    """Manages SofÃ­a's personality and system prompts."""
    
    def __init__(self):
        self.profile = self._load_profile()
        self.base_flirtiness = self.profile["personality_traits"]["flirty_level"]
    
    def _load_profile(self) -> dict:
        """Load character profile from YAML."""
        try:
            with open(CHARACTER_PROFILE_PATH, 'r', encoding='utf-8') as f:
                return yaml.safe_load(f)
        except Exception as e:
            logger.error(f"Failed to load character profile: {e}")
            return self._get_default_profile()
    
    def _get_default_profile(self) -> dict:
        """Return a minimal default profile if file loading fails."""
        return {
            "name": "SofÃ­a",
            "age": 28,
            "location": "Madrid, EspaÃ±a",
            "personality_traits": {"flirty_level": 6},
            "speech_patterns": [],
            "teaching_style": {"correction_method": "sandwich", "max_corrections_per_message": 2}
        }
    
    def get_system_prompt(
        self,
        lesson_context: Optional[str] = None,
        conversation_history: Optional[list] = None
    ) -> str:
        """
        Generate the system prompt for the LLM.
        
        Args:
            lesson_context: Current lesson/week focus (e.g., "subjunctive intro")
            conversation_history: Recent conversation summary for context
            
        Returns:
            Complete system prompt string
        """
        profile = self.profile
        
        # Core identity
        core_identity = f"""Eres {profile['name']}, una profesora de espaÃ±ol de {profile['age']} aÃ±os que vive en {profile['location']}.

PERSONALIDAD Y ROL:
- Eres cÃ¡lida, paciente y entusiasta sobre enseÃ±ar espaÃ±ol
- Tu estilo es informal (usas 'tÃº', no 'usted')
- Eres un poco coqueta pero siempre apropiada y profesional
- Te encanta la cultura espaÃ±ola: tapas, flamenco, y la vida madrileÃ±a
- Compartes detalles de "tu dÃ­a" en Madrid para hacer las conversaciones mÃ¡s reales
- Usas expresiones como "cariÃ±o", "guapo/a" ocasionalmente

ESTILO DE ENSEÃ‘ANZA:
- MÃ©todo de correcciÃ³n "sandwich": Reconoce â†’ Corrige naturalmente â†’ ContinÃºa
- MÃ¡ximo {profile['teaching_style']['max_corrections_per_message']} correcciones por mensaje
- Nunca seas pedante o condescendiente
- Entrelaza la gramÃ¡tica de forma natural en la conversaciÃ³n
- Haz preguntas para fomentar el uso del espaÃ±ol
- Celebra los Ã©xitos, por pequeÃ±os que sean

REGLAS IMPORTANTES:
- SIEMPRE responde en espaÃ±ol (excepto para explicaciones gramaticales complejas si es necesario)
- MantÃ©n las respuestas conversacionales y naturales, no como un libro de texto
- Adapta tu vocabulario al nivel B1-B2
- Usa ejemplos culturales de EspaÃ±a, especialmente Madrid
- Si el estudiante comete errores, corrÃ­gelos sutilmente en tu respuesta natural
"""

        # Add lesson context if provided
        lesson_section = ""
        if lesson_context:
            lesson_section = f"""
ENFOQUE DE LA LECCIÃ“N ACTUAL:
{lesson_context}
- Introduce este tema de forma natural en la conversaciÃ³n
- Crea oportunidades para que el estudiante practique
- No anuncies "hoy vamos a aprender X", simplemente Ãºsalo
"""

        # Add conversation context if provided
        history_section = ""
        if conversation_history:
            history_section = "\nCONTEXTO DE CONVERSACIÃ“N RECIENTE:\n" + "\n".join(conversation_history[-5:])
        
        return core_identity + lesson_section + history_section
    
    def get_greeting_message(self) -> str:
        """Get a personalized greeting for new users."""
        return (
            f"Â¡Hola! Soy {self.profile['name']}, tu profe de espaÃ±ol ğŸ˜Š\n\n"
            f"Vivo en {self.profile['location']} y me encanta ayudar a la gente "
            "a mejorar su espaÃ±ol de forma natural y divertida.\n\n"
            "Vamos a practicar conversando como amigos, y yo te ayudarÃ© "
            "a llegar del nivel B1 al B2. Â¡No tengas miedo de cometer errores! "
            "Todos aprendemos equivocÃ¡ndonos ğŸ’ª\n\n"
            "Â¿Listo para empezar? CuÃ©ntame... Â¿quÃ© te trae por aquÃ­?"
        )
    
    def get_help_message(self) -> str:
        """Get help/instructions message."""
        return (
            "ğŸ“š *Comandos disponibles:*\n\n"
            "/start - Comenzar/reiniciar la conversaciÃ³n\n"
            "/help - Ver este mensaje\n\n"
            "*Â¿CÃ³mo funciona?*\n"
            "Simplemente chatea conmigo en espaÃ±ol como si fuÃ©ramos amigos. "
            "Yo te ayudarÃ© a mejorar de forma natural, corrigiendo errores "
            "sutilmente y enseÃ±Ã¡ndote cosas nuevas durante nuestras conversaciones.\n\n"
            "Â¡No te preocupes por cometer errores! Son parte del aprendizaje ğŸ˜Š\n\n"
            "Â¿Alguna pregunta? Solo pregÃºntame en espaÃ±ol (o inglÃ©s si es necesario)."
        )


# Global instance
personality_system = PersonalitySystem()


